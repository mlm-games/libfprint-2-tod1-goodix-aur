name: Check and Update libfprint-2-tod1-goodix

on:
  schedule:
    # Run every 20 days at 00:00 UTC
    - cron: '0 0 * */3 *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if version unchanged'
        required: false
        default: false
        type: boolean
      increment_pkgrel:
        description: 'Increment pkgrel (for same version updates)'
        required: false
        default: false
        type: boolean

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install requests beautifulsoup4
    
    - name: Check for updates from Launchpad
      id: check
      run: |
        # Create inline Python script to check versions
        cat > check_version.py << 'EOF'
        import requests
        from bs4 import BeautifulSoup
        import re
        import json
        
        LAUNCHPAD_URL = "https://launchpad.net/~libfprint-tod1-group/+archive/ubuntu/ppa/+packages"
        PACKAGE_NAME = "libfprint-2-tod1-goodix"
        
        def get_latest_version():
            response = requests.get(LAUNCHPAD_URL)
            if response.status_code != 200:
                return None
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            for row in soup.find_all('tr'):
                if PACKAGE_NAME in str(row):
                    version_match = re.search(rf'{PACKAGE_NAME}\s+(\d+\.\d+\.\d+\+\d+-\d+ubuntu\d+)', str(row))
                    if version_match:
                        return version_match.group(1)
            return None
        
        latest = get_latest_version()
        if latest:
            # Extract just the version number without ubuntu suffix for pkgver
            pkgver = latest.split('-')[0]
            print(json.dumps({
                "full_version": latest,
                "pkgver": pkgver
            }))
        EOF
        
        # Run the script and capture output
        VERSION_INFO=$(python3 check_version.py)
        
        if [ -z "$VERSION_INFO" ]; then
          echo "Failed to fetch version info"
          exit 1
        fi
        
        LATEST_FULL=$(echo "$VERSION_INFO" | jq -r '.full_version')
        LATEST_PKGVER=$(echo "$VERSION_INFO" | jq -r '.pkgver')
        
        echo "Latest version: $LATEST_FULL"
        echo "latest_version=$LATEST_FULL" >> $GITHUB_OUTPUT
        echo "pkgver=$LATEST_PKGVER" >> $GITHUB_OUTPUT
        
        # Get current version from local PKGBUILD or AUR
        CURRENT_PKGVER=""
        if [ -f PKGBUILD ]; then
          CURRENT_PKGVER=$(grep "^pkgver=" PKGBUILD | cut -d= -f2)
        fi
        
        if [ -z "$CURRENT_PKGVER" ]; then
          # Try AUR
          CURRENT_PKGVER=$(curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=libfprint-2-tod1-goodix" | grep "^pkgver=" | cut -d= -f2 || echo "")
        fi
        
        echo "Current pkgver: $CURRENT_PKGVER"
        echo "current_pkgver=$CURRENT_PKGVER" >> $GITHUB_OUTPUT
        
        if [[ "$LATEST_PKGVER" != "$CURRENT_PKGVER" ]] || [[ "${{ inputs.force_update }}" == "true" ]]; then
          echo "update_needed=true" >> $GITHUB_OUTPUT
        else
          echo "update_needed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Download and calculate checksum
      if: steps.check.outputs.update_needed == 'true'
      id: download
      run: |
        DEB_URL="https://launchpad.net/~libfprint-tod1-group/+archive/ubuntu/ppa/+files/libfprint-2-tod1-goodix-550a_${{ steps.check.outputs.latest_version }}_amd64.deb"
        wget -O temp.deb "$DEB_URL"
        CHECKSUM=$(sha256sum temp.deb | cut -d ' ' -f 1)
        echo "sha256sum=$CHECKSUM" >> $GITHUB_OUTPUT
        rm temp.deb
    
    - name: Get current pkgrel from AUR
      if: steps.check.outputs.update_needed == 'true'
      id: current_pkgrel
      run: |
        # Try to get current PKGBUILD from AUR
        CURRENT_PKGREL=$(curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=libfprint-2-tod1-goodix" | grep "^pkgrel=" | cut -d= -f2 || echo "0")
        echo "current_pkgrel=$CURRENT_PKGREL" >> $GITHUB_OUTPUT
        
        # Check if the version in AUR matches what we're updating to
        AUR_VERSION=$(curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=libfprint-2-tod1-goodix" | grep "^pkgver=" | cut -d= -f2 || echo "none")
        if [[ "$AUR_VERSION" == "${{ steps.check.outputs.pkgver }}" ]]; then
          echo "same_version=true" >> $GITHUB_OUTPUT
        else
          echo "same_version=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
    
    - name: Determine pkgrel
      if: steps.check.outputs.update_needed == 'true'
      id: pkgrel
      run: |
        if [[ "${{ steps.current_pkgrel.outputs.same_version }}" == "true" ]] && [[ "${{ inputs.increment_pkgrel }}" == "true" ]]; then
          CURRENT=${{ steps.current_pkgrel.outputs.current_pkgrel }}
          NEW_PKGREL=$((CURRENT + 1))
          echo "pkgrel=$NEW_PKGREL" >> $GITHUB_OUTPUT
        else
          echo "pkgrel=1" >> $GITHUB_OUTPUT
        fi
    
    - name: Create PKGBUILD
      if: steps.check.outputs.update_needed == 'true'
      run: |
        mkdir -p aur-package
        cat > aur-package/PKGBUILD << 'EOF'
        # Maintainer: MLM-stuff gfxoxinzh@mozmail.com
        
        pkgname=libfprint-2-tod1-goodix
        pkgver=${{ steps.check.outputs.pkgver }}
        _debver="${pkgver}-0ubuntu1"
        _debname="libfprint-2-tod1-goodix-550a"
        pkgrel=${{ steps.pkgrel.outputs.pkgrel }}
        pkgdesc="Proprietary driver for Goodix fingerprint readers from Ubuntu launchpad"
        arch=('x86_64')
        url="https://launchpad.net/~libfprint-tod1-group"
        license=('custom')
        depends=('libfprint-tod')
        makedepends=('tar')
        groups=('fprint')
        source=("https://launchpad.net/~libfprint-tod1-group/+archive/ubuntu/ppa/+files/${_debname}_${_debver}_amd64.deb")
        sha256sums=('${{ steps.download.outputs.sha256sum }}')
        
        prepare() {
            cd "$srcdir"
            # Extract the deb file
            ar x "${_debname}_${_debver}_amd64.deb"
            # Extract data archive
            tar -xf data.tar.*
        }
        
        package() {
            cd "$srcdir"
            
            # Adjust udev rules for Arch (replace plugdev with uaccess, rm unnecessary ATTRS{dev})
            if [ -f "lib/udev/rules.d/60-libfprint-2-tod1-goodix.rules" ]; then
                sed -i 's/, ATTRS{dev}=="\*"//' lib/udev/rules.d/60-libfprint-2-tod1-goodix.rules
                sed -i 's/GROUP="plugdev"/TAG+="uaccess"/' lib/udev/rules.d/60-libfprint-2-tod1-goodix.rules
            fi
            
            # Install library files
            if [ -d "usr/lib/x86_64-linux-gnu/libfprint-2/tod-1" ]; then
                install -dm755 "$pkgdir/usr/lib/libfprint-2/tod-1/"
                install -Dm755 usr/lib/x86_64-linux-gnu/libfprint-2/tod-1/*.so "$pkgdir/usr/lib/libfprint-2/tod-1/"
            fi
            
            # Install udev rules
            if [ -d "lib/udev/rules.d" ]; then
                install -dm755 "$pkgdir/usr/lib/udev/rules.d/"
                install -Dm644 lib/udev/rules.d/*.rules "$pkgdir/usr/lib/udev/rules.d/"
            fi
            
            # Install license if present
            if [ -f "usr/share/doc/${_debname}/copyright" ]; then
                install -Dm644 "usr/share/doc/${_debname}/copyright" "$pkgdir/usr/share/licenses/${pkgname}/LICENSE"
            fi
        }
        EOF
    
    - name: Publish to AUR
      if: steps.check.outputs.update_needed == 'true'
      uses: KSXGitHub/github-actions-deploy-aur@master
      with:
        pkgname: libfprint-2-tod1-goodix
        pkgbuild: aur-package/PKGBUILD
        commit_username: MLM-stuff
        commit_email: gfxoxinzh@mozmail.com
        ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        commit_message: "Update to version ${{ steps.check.outputs.pkgver }}-${{ steps.pkgrel.outputs.pkgrel }}"
    
    - name: Update repository files
      if: steps.check.outputs.update_needed == 'true'
      run: |
        # Copy the updated PKGBUILD back to the repo
        cp aur-package/PKGBUILD .
        
        # Update README if needed
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add PKGBUILD
        git commit -m "Update to version ${{ steps.check.outputs.pkgver }}" || echo "No changes to commit"
        git push || echo "No changes to push"
